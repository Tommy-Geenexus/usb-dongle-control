<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:ControlScreen.kt$@Composable fun ControlScreen( modifier: Modifier = Modifier, windowSizeClass: WindowSizeClass = WindowSizeClass.calculateFromSize(DpSize.Zero), scrollBehavior: TopAppBarScrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior(), profileListState: LazyStaggeredGridState = rememberLazyStaggeredGridState(), snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, profiles: LazyPagingItems&lt;Profile&gt; = UnsupportedUsbDongle.profileFlow().collectAsLazyPagingItems(), usbDongle: UsbDongle = UnsupportedUsbDongle, isLoading: Boolean = false, onNavigateToSettings: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onReset: () -&gt; Unit = {}, onProfileShortcutAdd: (Profile) -&gt; Unit = {}, onProfileShortcutRemove: (Profile) -&gt; Unit = {}, onProfileDelete: (Profile) -&gt; Unit = { _ -&gt; }, onProfileApply: (Profile) -&gt; Unit = { _ -&gt; }, onProfileExport: (String) -&gt; Unit = { _ -&gt; }, onChannelBalanceSelected: (Int) -&gt; Unit = { _ -&gt; }, onDacModeSelected: (Byte) -&gt; Unit = { _ -&gt; }, onDisplayBrightnessSelected: (Int) -&gt; Unit = { _ -&gt; }, onDisplayTimeoutSelected: (Int) -&gt; Unit = { _ -&gt; }, onDisplayInvertChange: (Boolean) -&gt; Unit = { _ -&gt; }, onFilterSelected: (Byte) -&gt; Unit = { _ -&gt; }, onGainSelected: (Byte) -&gt; Unit = { _ -&gt; }, onHardwareMuteEnabledSelected: (Boolean) -&gt; Unit = { _ -&gt; }, onHidModeSelected: (Byte) -&gt; Unit = { _ -&gt; }, onIndicatorStateSelected: (Byte) -&gt; Unit = { _ -&gt; }, onSpdifOutEnabledSelected: (Boolean) -&gt; Unit = { _ -&gt; }, onVolumeLevelSelected: (Int) -&gt; Unit = { _ -&gt; }, onVolumeModeSelected: (Byte) -&gt; Unit = { _ -&gt; } )</ID>
    <ID>CyclomaticComplexMethod:ControlScreen.kt$@Composable fun ControlScreen( windowSizeClass: WindowSizeClass, viewModel: ControlViewModel, onNavigateToSettings: () -&gt; Unit, onNavigateUp: () -&gt; Unit )</ID>
    <ID>EmptyFunctionBlock:ItemAudio.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:ItemDisplay.kt$&lt;no name provided&gt;${ }</ID>
    <ID>ForbiddenComment:FiioKa13UsbRepository.kt$FiioKa13UsbRepository$// FIXME: Reading current state is not working properly (firmware issue?)</ID>
    <ID>ForbiddenComment:FiioKa13UsbRepository.kt$FiioKa13UsbRepository$// TODO: Is it actually working?</ID>
    <ID>LargeClass:FiioKa5UsbRepository.kt$FiioKa5UsbRepository : UsbRepository</ID>
    <ID>LongMethod:ControlScreen.kt$@Composable fun ControlScreen( modifier: Modifier = Modifier, windowSizeClass: WindowSizeClass = WindowSizeClass.calculateFromSize(DpSize.Zero), scrollBehavior: TopAppBarScrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior(), profileListState: LazyStaggeredGridState = rememberLazyStaggeredGridState(), snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, profiles: LazyPagingItems&lt;Profile&gt; = UnsupportedUsbDongle.profileFlow().collectAsLazyPagingItems(), usbDongle: UsbDongle = UnsupportedUsbDongle, isLoading: Boolean = false, onNavigateToSettings: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onReset: () -&gt; Unit = {}, onProfileShortcutAdd: (Profile) -&gt; Unit = {}, onProfileShortcutRemove: (Profile) -&gt; Unit = {}, onProfileDelete: (Profile) -&gt; Unit = { _ -&gt; }, onProfileApply: (Profile) -&gt; Unit = { _ -&gt; }, onProfileExport: (String) -&gt; Unit = { _ -&gt; }, onChannelBalanceSelected: (Int) -&gt; Unit = { _ -&gt; }, onDacModeSelected: (Byte) -&gt; Unit = { _ -&gt; }, onDisplayBrightnessSelected: (Int) -&gt; Unit = { _ -&gt; }, onDisplayTimeoutSelected: (Int) -&gt; Unit = { _ -&gt; }, onDisplayInvertChange: (Boolean) -&gt; Unit = { _ -&gt; }, onFilterSelected: (Byte) -&gt; Unit = { _ -&gt; }, onGainSelected: (Byte) -&gt; Unit = { _ -&gt; }, onHardwareMuteEnabledSelected: (Boolean) -&gt; Unit = { _ -&gt; }, onHidModeSelected: (Byte) -&gt; Unit = { _ -&gt; }, onIndicatorStateSelected: (Byte) -&gt; Unit = { _ -&gt; }, onSpdifOutEnabledSelected: (Boolean) -&gt; Unit = { _ -&gt; }, onVolumeLevelSelected: (Int) -&gt; Unit = { _ -&gt; }, onVolumeModeSelected: (Byte) -&gt; Unit = { _ -&gt; } )</ID>
    <ID>LongMethod:ControlScreen.kt$@Composable fun ControlScreen( windowSizeClass: WindowSizeClass, viewModel: ControlViewModel, onNavigateToSettings: () -&gt; Unit, onNavigateUp: () -&gt; Unit )</ID>
    <ID>LongMethod:FiioKa13UsbRepository.kt$FiioKa13UsbRepository$suspend fun setVolumeLevel(fiioKa13: FiioKa13, volumeLevel: VolumeLevel): Result&lt;FiioKa13&gt;</ID>
    <ID>LongMethod:FiioKa5Items.kt$@Composable fun FiioKa5Items( modifier: Modifier = Modifier, fiioKa5: FiioKa5 = FiioKa5(), onChannelBalanceSelected: (Int) -&gt; Unit = {}, onVolumeLevelSelected: (Int) -&gt; Unit = {}, onVolumeModeSelected: (Byte) -&gt; Unit = {}, onDisplayBrightnessSelected: (Int) -&gt; Unit = {}, onDisplayTimeoutSelected: (Int) -&gt; Unit = {}, onDisplayInvertSelected: (Boolean) -&gt; Unit = {}, onGainSelected: (Byte) -&gt; Unit = {}, onFilterSelected: (Byte) -&gt; Unit = {}, onSpdifOutSelected: (Boolean) -&gt; Unit = {}, onHardwareMuteSelected: (Boolean) -&gt; Unit = {}, onDacModeSelected: (Byte) -&gt; Unit = {}, onHidModeSelected: (Byte) -&gt; Unit = {} )</ID>
    <ID>LongMethod:FiioKa5UsbRepository.kt$FiioKa5UsbRepository$suspend fun getCurrentState(usbDongle: FiioKa5): Result&lt;FiioKa5&gt;</ID>
    <ID>LongMethod:FiioKa5UsbRepository.kt$FiioKa5UsbRepository$suspend fun setAll( fiioKa5: FiioKa5, channelBalance: ChannelBalance, dacMode: DacMode, displayBrightness: DisplayBrightness, displayInvert: DisplayInvert, displayTimeout: DisplayTimeout, filter: Filter, gain: Gain, hardwareMute: HardwareMute, hidMode: HidMode, spdifOut: SpdifOut, volumeLevel: VolumeLevel, volumeMode: VolumeMode ): Result&lt;FiioKa5&gt;</ID>
    <ID>LongMethod:ItemAudio.kt$@Composable fun ItemAudio( modifier: Modifier = Modifier, channelBalance: Float = ChannelBalance.default().displayValue.toFloat(), channelBalanceInDb: String = ChannelBalance.default().displayValueToDecibel(), channelBalanceDirection: String = "", channelBalanceStart: Float = ChannelBalance.MIN.toFloat(), channelBalanceEnd: Float = ChannelBalance.MAX.toFloat(), channelBalanceStepSize: Float = 1f, volumeMode: VolumeMode = VolumeMode.default(), volumeLevel: Float = VolumeLevel.default().displayValue.toFloat(), volumeLevelInPercent: String = VolumeLevel.default().displayValueToPercent(volumeMode), volumeLevelStart: Float = VolumeLevel.MIN.toFloat(), volumeLevelEndModeA: Float = VolumeLevel.MAX_A.toFloat(), volumeLevelEndModeB: Float = VolumeLevel.MAX_B.toFloat(), onChannelBalanceToDb: (Int) -&gt; String = { channelBalanceInDb }, onChannelBalanceSelected: (Int) -&gt; Unit = {}, onVolumeLevelToPercent: (Int) -&gt; String = { volumeLevelInPercent }, onVolumeLevelSelected: (Int) -&gt; Unit = {}, onVolumeModeSelected: (Byte) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ItemDisplay.kt$@Composable fun ItemDisplay( modifier: Modifier = Modifier, displayBrightness: Float = DisplayBrightness.default().displayValue.toFloat(), displayBrightnessInPercent: String = DisplayBrightness.default().displayValueToPercent(), displayBrightnessStart: Float = DisplayBrightness.MIN.toFloat(), displayBrightnessEnd: Float = DisplayBrightness.MAX.toFloat(), displayBrightnessStepSize: Float = 1f, displayTimeout: Float = DisplayTimeout.default().displayValue.toFloat(), displayTimeoutInSeconds: String = DisplayTimeout.default().displayValueToSeconds(), displayTimeoutStart: Float = DisplayTimeout.MIN.toFloat(), displayTimeoutEnd: Float = DisplayTimeout.MAX.toFloat(), isDisplayInvertEnabled: Boolean = false, onDisplayBrightnessToPercent: (Int) -&gt; String = { _ -&gt; displayBrightnessInPercent }, onDisplayBrightnessSelected: (Int) -&gt; Unit = {}, onDisplayTimeoutToSeconds: (Int) -&gt; String = { _ -&gt; displayTimeoutInSeconds }, onDisplayTimeoutSelected: (Int) -&gt; Unit = {}, onDisplayInvertSwitched: (Boolean) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ItemMisc.kt$@Composable fun ItemMisc( modifier: Modifier = Modifier, isSpdifOutEnabled: Boolean = false, isHardwareMuteEnabled: Boolean = false, dacModeId: Byte = DacMode.default().id, hidModeId: Byte = HidMode.default().id, onSpdifOutEnabledSwitched: (Boolean) -&gt; Unit = {}, onHardwareMuteEnabledSwitched: (Boolean) -&gt; Unit = {}, onDacModeSelected: (Byte) -&gt; Unit = {}, onHidModeSelected: (Byte) -&gt; Unit = {} )</ID>
    <ID>LongMethod:MoondropDawnUsbRepository.kt$MoondropDawnUsbRepository$suspend fun getCurrentState(usbDongle: MoondropDawn): Result&lt;MoondropDawn&gt;</ID>
    <ID>LongMethod:MoondropDawnUsbRepository.kt$MoondropDawnUsbRepository$suspend fun setAll( moondropDawn: MoondropDawn, filter: Filter, gain: Gain, indicatorState: IndicatorState, volumeLevel: VolumeLevel ): Result&lt;MoondropDawn&gt;</ID>
    <ID>LongMethod:NavGraph.kt$@Composable fun NavGraph( windowSizeClass: WindowSizeClass, navController: NavHostController, modifier: Modifier = Modifier, startDestination: NavDestinations = NavDestinations.Setup )</ID>
    <ID>LongMethod:ProfileItems.kt$@Composable fun ProfileItems( modifier: Modifier = Modifier, state: LazyStaggeredGridState = rememberLazyStaggeredGridState(), profiles: LazyPagingItems&lt;Profile&gt; = UnsupportedUsbDongle.profileFlow().collectAsLazyPagingItems(), onProfileShortcutAdd: (Profile) -&gt; Unit = {}, onProfileShortcutRemove: (Profile) -&gt; Unit = {}, onProfileDelete: (Profile) -&gt; Unit = {}, onProfileApply: (Profile) -&gt; Unit = {} )</ID>
    <ID>LongMethod:SetupScreen.kt$@Composable fun SetupScreen(viewModel: SetupViewModel, onNavigateToControl: () -&gt; Unit)</ID>
    <ID>LongMethod:UsbServiceNotification.kt$UsbServiceNotification$fun &lt;D&gt; build( context: Context, usbDongle: D, volumeStepSize: Int ): Notification</ID>
    <ID>LongParameterList:ControlDropDownMenu.kt$( windowSizeClass: WindowSizeClass, onShouldShowMore: () -&gt; Boolean, onDismissRequest: () -&gt; Unit, onRefresh: () -&gt; Unit, onReset: () -&gt; Unit, onProfileExport: (String) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:ControlTopAppBar.kt$( windowSizeClass: WindowSizeClass, scrollBehavior: TopAppBarScrollBehavior, productName: String, onRefresh: () -&gt; Unit, onReset: () -&gt; Unit, onProfileExport: (String) -&gt; Unit, shouldShowActions: () -&gt; Boolean, windowInsets: WindowInsets, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:ControlViewModel.kt$ControlViewModel$( savedStateHandle: SavedStateHandle, pagingConfig: PagingConfig, private val audioRepository: AudioRepository, private val profileRepository: ProfileRepository, private val usbRepository: UsbRepository, private val settingsRepository: SettingsRepository, private val setProfileUseCase: SetProfileUseCase, private val getCurrentStateUseCase: GetCurrentStateUseCase, private val getVolumeLevelUseCase: GetVolumeLevelUseCase, private val setChannelBalanceUseCase: SetChannelBalanceUseCase, private val setDacFilterUseCase: SetDacFilterUseCase, private val setDacModeUseCase: SetDacModeUseCase, private val setDisplayBrightnessUseCase: SetDisplayBrightnessUseCase, private val setDisplayInvertEnabledUseCase: SetDisplayInvertEnabledUseCase, private val setDisplayTimeoutUseCase: SetDisplayTimeoutUseCase, private val setGainUseCase: SetGainUseCase, private val setHardwareMuteEnabledUseCase: SetHardwareMuteEnabledUseCase, private val setHidModeUseCase: SetHidModeUseCase, private val setIndicatorStateUseCase: SetIndicatorStateUseCase, private val setSpdifOutEnabledUseCase: SetSpdifOutEnabledUseCase, private val setVolumeLevelUseCase: SetVolumeLevelUseCase, private val setVolumeModeUseCase: SetVolumeModeUseCase )</ID>
    <ID>LongParameterList:FiioKa5UsbRepository.kt$FiioKa5UsbRepository$( fiioKa5: FiioKa5, channelBalance: ChannelBalance, dacMode: DacMode, displayBrightness: DisplayBrightness, displayInvert: DisplayInvert, displayTimeout: DisplayTimeout, filter: Filter, gain: Gain, hardwareMute: HardwareMute, hidMode: HidMode, spdifOut: SpdifOut, volumeLevel: VolumeLevel, volumeMode: VolumeMode )</ID>
    <ID>MagicNumber:AttachUsbDongle.kt$2000</ID>
    <ID>MagicNumber:ControlScreen.kt$0.01f</ID>
    <ID>MagicNumber:DisplayBrightness.kt$100</ID>
    <ID>MagicNumber:ProfileItems.kt$16</ID>
    <ID>MagicNumber:VolumeLevel.kt$100</ID>
    <ID>ReturnCount:UsbServiceVolumeLevelReceiver.kt$UsbServiceVolumeLevelReceiver$override fun onReceive(context: Context?, intent: Intent?)</ID>
    <ID>TooGenericExceptionCaught:CoroutineExtensions.kt$exception: Exception</ID>
    <ID>TooManyFunctions:ControlViewModel.kt$ControlViewModel : ViewModelContainerHost</ID>
    <ID>TooManyFunctions:FiioKa5UsbRepository.kt$FiioKa5UsbRepository : UsbRepository</ID>
    <ID>TopLevelPropertyNaming:NavGraph.kt$private const val TRANSITION_DURATION = 300</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val INTENT_ACTION_SHORTCUT_PROFILE = TOP_LEVEL_PACKAGE_NAME + "INTENT_ACTION_SHORTCUT_PROFILE"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val INTENT_ACTION_USB_PERMISSION = TOP_LEVEL_PACKAGE_NAME + "INTENT_ACTION_USB_PERMISSION"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val INTENT_EXTRA_CONSUMED = TOP_LEVEL_PACKAGE_NAME + "EXTRA_CONSUMED"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val TOP_LEVEL_PACKAGE_NAME = "io.github.tommygeenexus."</ID>
  </CurrentIssues>
</SmellBaseline>
