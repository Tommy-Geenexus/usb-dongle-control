<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:FiioKa5UsbCommunicationRepository.kt$FiioKa5UsbCommunicationRepository$override suspend fun getCurrentState(connection: UsbDeviceConnection): FiioKa5?</ID>
    <ID>CyclomaticComplexMethod:MainScreen.kt$@Composable fun MainScreen( modifier: Modifier = Modifier, windowSizeClass: WindowSizeClass = WindowSizeClass.calculateFromSize(DpSize.Zero), scrollBehavior: TopAppBarScrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior(), profileListState: LazyStaggeredGridState = rememberLazyStaggeredGridState(), snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, usbDongle: UsbDongle? = null, profiles: ProfilesList = ProfilesList(), isLoading: Boolean = false, isDeviceAttached: Boolean = false, isUsbPermissionGranted: Boolean = false, onPermissionRequest: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onReset: (UsbDongle) -&gt; Unit = {}, onProfileShortcutAdd: (Profile) -&gt; Unit = {}, onProfileShortcutRemove: (Profile) -&gt; Unit = {}, onProfileDelete: (Profile) -&gt; Unit = {}, onProfileApply: (UsbDongle, Profile) -&gt; Unit = { _, _ -&gt; }, onProfileExport: (String, UsbDongle) -&gt; Unit = { _, _ -&gt; }, onChannelBalanceChanged: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onChannelBalanceSelected: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDacModeSelected: (UsbDongle, DacMode) -&gt; Unit = { _, _ -&gt; }, onDisplayBrightnessChanged: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDisplayBrightnessSelected: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDisplayTimeoutChanged: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDisplayTimeoutSelected: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDisplayInvertChange: (UsbDongle, Boolean) -&gt; Unit = { _, _ -&gt; }, onFilterSelected: (UsbDongle, Filter) -&gt; Unit = { _, _ -&gt; }, onGainSelected: (UsbDongle, Gain) -&gt; Unit = { _, _ -&gt; }, onHardwareMuteEnabledSelected: (UsbDongle, Boolean) -&gt; Unit = { _, _ -&gt; }, onHidModeSelected: (UsbDongle, HidMode) -&gt; Unit = { _, _ -&gt; }, onIndicatorStateSelected: (UsbDongle, IndicatorState) -&gt; Unit = { _, _ -&gt; }, onSpdifOutEnabledSelected: (UsbDongle, Boolean) -&gt; Unit = { _, _ -&gt; }, onVolumeLevelChanged: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onVolumeLevelSelected: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onVolumeModeSelected: (UsbDongle, VolumeMode) -&gt; Unit = { _, _ -&gt; } )</ID>
    <ID>CyclomaticComplexMethod:MainScreen.kt$@Composable fun MainScreen( windowSizeClass: WindowSizeClass, viewModel: MainViewModel, modifier: Modifier = Modifier )</ID>
    <ID>LargeClass:FiioKa5UsbCommunicationRepository.kt$FiioKa5UsbCommunicationRepository : UsbTransfer</ID>
    <ID>LongMethod:FiioKa5Items.kt$@Composable fun FiioKa5Items( modifier: Modifier = Modifier, fiioKa5: FiioKa5 = FiioKa5(), onChannelBalanceChanged: (Int) -&gt; Unit = {}, onChannelBalanceSelected: (Int) -&gt; Unit = {}, onVolumeLevelChanged: (Int) -&gt; Unit = {}, onVolumeLevelSelected: (Int) -&gt; Unit = {}, onVolumeModeSelected: (VolumeMode) -&gt; Unit = {}, onDisplayBrightnessChanged: (Int) -&gt; Unit = {}, onDisplayBrightnessSelected: (Int) -&gt; Unit = {}, onDisplayTimeoutChanged: (Int) -&gt; Unit = {}, onDisplayTimeoutSelected: (Int) -&gt; Unit = {}, onDisplayInvertChange: (Boolean) -&gt; Unit = {}, onGainSelected: (Gain) -&gt; Unit = {}, onFilterSelected: (Filter) -&gt; Unit = {}, onSpdifOutEnabledSelected: (Boolean) -&gt; Unit = {}, onHardwareMuteEnabledSelected: (Boolean) -&gt; Unit = {}, onDacModeSelected: (DacMode) -&gt; Unit = {}, onHidModeSelected: (HidMode) -&gt; Unit = {} )</ID>
    <ID>LongMethod:FiioKa5UsbCommunicationRepository.kt$FiioKa5UsbCommunicationRepository$override suspend fun getCurrentState(connection: UsbDeviceConnection): FiioKa5?</ID>
    <ID>LongMethod:ItemAudio.kt$@Composable fun ItemAudio( modifier: Modifier = Modifier, channelBalance: Float = FiioKa5Defaults.CHANNEL_BALANCE.toFloat(), channelBalanceStepSize: Int = FiioKa5Defaults.CHANNEL_BALANCE_MIN.absoluteValue + FiioKa5Defaults.CHANNEL_BALANCE_MAX + 1, channelBalanceRange: ClosedFloatingPointRange&lt;Float&gt; = FiioKa5Defaults.CHANNEL_BALANCE_MIN.toFloat()..FiioKa5Defaults.CHANNEL_BALANCE_MAX.toFloat(), volumeMode: VolumeMode = VolumeMode.default(), volumeLevel: Float = FiioKa5Defaults.VOLUME_LEVEL.toFloat(), volumeLevelInPercent: String = FiioKa5Defaults.VOLUME_LEVEL.toString(), volumeRange: ClosedFloatingPointRange&lt;Float&gt; = if (volumeMode == VolumeMode.S120) { FiioKa5Defaults.VOLUME_LEVEL_MIN.toFloat()..FiioKa5Defaults.VOLUME_LEVEL_A_MAX.toFloat() } else { FiioKa5Defaults.VOLUME_LEVEL_MIN.toFloat()..FiioKa5Defaults.VOLUME_LEVEL_B_MAX.toFloat() }, onChannelBalanceChanged: (Int) -&gt; Unit = {}, onChannelBalanceSelected: (Int) -&gt; Unit = {}, onVolumeLevelChanged: (Int) -&gt; Unit = {}, onVolumeLevelSelected: (Int) -&gt; Unit = {}, onVolumeModeSelected: (VolumeMode) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ItemDisplay.kt$@Composable fun ItemDisplay( modifier: Modifier = Modifier, displayBrightness: Float = FiioKa5Defaults.DISPLAY_BRIGHTNESS.toFloat(), displayBrightnessStepSize: Int = FiioKa5Defaults.DISPLAY_BRIGHTNESS_MAX, displayBrightnessRange: ClosedFloatingPointRange&lt;Float&gt; = FiioKa5Defaults.DISPLAY_BRIGHTNESS_MIN.toFloat()..FiioKa5Defaults.DISPLAY_BRIGHTNESS_MAX.toFloat(), displayTimeout: Float = FiioKa5Defaults.DISPLAY_TIMEOUT.toFloat(), displayTimeoutRange: ClosedFloatingPointRange&lt;Float&gt; = FiioKa5Defaults.DISPLAY_TIMEOUT_MIN.toFloat()..FiioKa5Defaults.DISPLAY_TIMEOUT_MAX.toFloat(), displayInvertEnabled: Boolean = false, onDisplayBrightnessChanged: (Int) -&gt; Unit = {}, onDisplayBrightnessSelected: (Int) -&gt; Unit = {}, onDisplayTimeoutChanged: (Int) -&gt; Unit = {}, onDisplayTimeoutSelected: (Int) -&gt; Unit = {}, onDisplayInvertChange: (Boolean) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ItemMisc.kt$@Composable fun ItemMisc( modifier: Modifier = Modifier, spdifOutEnabled: Boolean = false, hardwareMuteEnabled: Boolean = false, dacMode: DacMode = DacMode.default(), hidMode: HidMode = HidMode.default(), onSpdifOutEnabledSelected: (Boolean) -&gt; Unit = {}, onHardwareMuteEnabledSelected: (Boolean) -&gt; Unit = {}, onDacModeSelected: (DacMode) -&gt; Unit = {}, onHidModeSelected: (HidMode) -&gt; Unit = {} )</ID>
    <ID>LongMethod:MainScreen.kt$@Composable fun MainDropdownMenu( windowSizeClass: WindowSizeClass, usbDongle: UsbDongle?, onShouldShowMore: () -&gt; Boolean, onDismissRequest: () -&gt; Unit, onRefresh: () -&gt; Unit, onReset: (UsbDongle) -&gt; Unit, onProfileExport: (String, UsbDongle) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:MainScreen.kt$@Composable fun MainScreen( modifier: Modifier = Modifier, windowSizeClass: WindowSizeClass = WindowSizeClass.calculateFromSize(DpSize.Zero), scrollBehavior: TopAppBarScrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior(), profileListState: LazyStaggeredGridState = rememberLazyStaggeredGridState(), snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, usbDongle: UsbDongle? = null, profiles: ProfilesList = ProfilesList(), isLoading: Boolean = false, isDeviceAttached: Boolean = false, isUsbPermissionGranted: Boolean = false, onPermissionRequest: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onReset: (UsbDongle) -&gt; Unit = {}, onProfileShortcutAdd: (Profile) -&gt; Unit = {}, onProfileShortcutRemove: (Profile) -&gt; Unit = {}, onProfileDelete: (Profile) -&gt; Unit = {}, onProfileApply: (UsbDongle, Profile) -&gt; Unit = { _, _ -&gt; }, onProfileExport: (String, UsbDongle) -&gt; Unit = { _, _ -&gt; }, onChannelBalanceChanged: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onChannelBalanceSelected: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDacModeSelected: (UsbDongle, DacMode) -&gt; Unit = { _, _ -&gt; }, onDisplayBrightnessChanged: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDisplayBrightnessSelected: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDisplayTimeoutChanged: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDisplayTimeoutSelected: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onDisplayInvertChange: (UsbDongle, Boolean) -&gt; Unit = { _, _ -&gt; }, onFilterSelected: (UsbDongle, Filter) -&gt; Unit = { _, _ -&gt; }, onGainSelected: (UsbDongle, Gain) -&gt; Unit = { _, _ -&gt; }, onHardwareMuteEnabledSelected: (UsbDongle, Boolean) -&gt; Unit = { _, _ -&gt; }, onHidModeSelected: (UsbDongle, HidMode) -&gt; Unit = { _, _ -&gt; }, onIndicatorStateSelected: (UsbDongle, IndicatorState) -&gt; Unit = { _, _ -&gt; }, onSpdifOutEnabledSelected: (UsbDongle, Boolean) -&gt; Unit = { _, _ -&gt; }, onVolumeLevelChanged: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onVolumeLevelSelected: (UsbDongle, Int) -&gt; Unit = { _, _ -&gt; }, onVolumeModeSelected: (UsbDongle, VolumeMode) -&gt; Unit = { _, _ -&gt; } )</ID>
    <ID>LongMethod:MainScreen.kt$@Composable fun MainScreen( windowSizeClass: WindowSizeClass, viewModel: MainViewModel, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:MainViewModelExtensions.kt$fun MainViewModel.applyFiioKa5Profile( fiioKa5: FiioKa5, fiioKa5Profile: FiioKa5Profile = FiioKa5Profile() )</ID>
    <ID>LongMethod:MoondropDawnUsbCommunicationRepository.kt$MoondropDawnUsbCommunicationRepository$override suspend fun getCurrentState( connection: UsbDeviceConnection ): MoondropDawn?</ID>
    <ID>LongMethod:ProfileItems.kt$@Composable fun ProfileItems( modifier: Modifier = Modifier, state: LazyStaggeredGridState = rememberLazyStaggeredGridState(), profiles: ProfilesList = ProfilesList(), onProfileShortcutAdd: (Profile) -&gt; Unit = {}, onProfileShortcutRemove: (Profile) -&gt; Unit = {}, onProfileDelete: (Profile) -&gt; Unit = {}, onProfileApply: (Profile) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:MainScreen.kt$( windowSizeClass: WindowSizeClass, scrollBehavior: TopAppBarScrollBehavior, shouldShowActions: () -&gt; Boolean, usbDongle: UsbDongle?, onRefresh: () -&gt; Unit, onReset: (UsbDongle) -&gt; Unit, onProfileExport: (String, UsbDongle) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:MainScreen.kt$( windowSizeClass: WindowSizeClass, usbDongle: UsbDongle?, onShouldShowMore: () -&gt; Boolean, onDismissRequest: () -&gt; Unit, onRefresh: () -&gt; Unit, onReset: (UsbDongle) -&gt; Unit, onProfileExport: (String, UsbDongle) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>MagicNumber:FiioKa5.kt$FiioKa5$100</ID>
    <ID>MagicNumber:FiioKa5UsbCommunicationRepository.kt$FiioKa5UsbCommunicationRepository$10</ID>
    <ID>MagicNumber:FiioKa5UsbCommunicationRepository.kt$FiioKa5UsbCommunicationRepository$100</ID>
    <ID>MagicNumber:FiioKa5UsbCommunicationRepository.kt$FiioKa5UsbCommunicationRepository$255</ID>
    <ID>MagicNumber:ItemDisplay.kt$100</ID>
    <ID>MagicNumber:MainScreen.kt$0.01f</ID>
    <ID>TooGenericExceptionCaught:Extensions.kt$exception: Exception</ID>
    <ID>TooManyFunctions:FiioKa5UsbCommunicationRepository.kt$FiioKa5UsbCommunicationRepository : UsbTransfer</ID>
    <ID>TooManyFunctions:MainScreen.kt$io.github.tommy_geenexus.usbdonglecontrol.main.ui.MainScreen.kt</ID>
    <ID>TooManyFunctions:MainViewModelExtensions.kt$io.github.tommy_geenexus.usbdonglecontrol.dongle.fiio.ka.ka5.business.MainViewModelExtensions.kt</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val INTENT_ACTION_SHORTCUT_PROFILE = TOP_LEVEL_PACKAGE_NAME + "INTENT_ACTION_SHORTCUT_PROFILE"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val INTENT_ACTION_USB_PERMISSION = TOP_LEVEL_PACKAGE_NAME + "INTENT_ACTION_USB_PERMISSION"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val INTENT_EXTRA_CONSUMED = TOP_LEVEL_PACKAGE_NAME + "EXTRA_CONSUMED"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_CHANNEL_BALANCE = TOP_LEVEL_PACKAGE_NAME + "CHANNEL_BALANCE"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_DAC_MODE = TOP_LEVEL_PACKAGE_NAME + "DAC_MODE"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_DISPLAY_BRIGHTNESS = TOP_LEVEL_PACKAGE_NAME + "DISPLAY_BRIGHTNESS"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_DISPLAY_INVERT_ENABLED = TOP_LEVEL_PACKAGE_NAME + "DISPLAY_INVERT_ENABLED"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_DISPLAY_TIMEOUT = TOP_LEVEL_PACKAGE_NAME + "DISPLAY_TIMEOUT"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_FILTER = TOP_LEVEL_PACKAGE_NAME + "FILTER"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_FW_VERSION = TOP_LEVEL_PACKAGE_NAME + "FW_VERSION"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_GAIN = TOP_LEVEL_PACKAGE_NAME + "GAIN"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_HID_MODE = TOP_LEVEL_PACKAGE_NAME + "HID_MODE"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_HW_MUTE_ENABLED = TOP_LEVEL_PACKAGE_NAME + "HW_MUTE_ENABLED"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_ID = TOP_LEVEL_PACKAGE_NAME + "ID"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_INDICATOR_STATE = TOP_LEVEL_PACKAGE_NAME + "INDICATOR_STATE"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_NAME = TOP_LEVEL_PACKAGE_NAME + "NAME"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_PRODUCT_ID = TOP_LEVEL_PACKAGE_NAME + "PRODUCT_ID"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_SAMPLE_RATE = TOP_LEVEL_PACKAGE_NAME + "SAMPLE_RATE"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_SPDIF_OUT_ENABLED = TOP_LEVEL_PACKAGE_NAME + "SPDIF_OUT_ENABLED"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_VENDOR_ID = TOP_LEVEL_PACKAGE_NAME + "VENDOR_ID"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_VOLUME_LEVEL = TOP_LEVEL_PACKAGE_NAME + "VOLUME_LEVEL"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val KEY_VOLUME_MODE = TOP_LEVEL_PACKAGE_NAME + "VOLUME_MODE"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val TOP_LEVEL_PACKAGE_NAME = "io.github.tommy_geenexus."</ID>
  </CurrentIssues>
</SmellBaseline>
