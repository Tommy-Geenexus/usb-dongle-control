<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:ControlScreen.kt$@Composable fun ControlScreen( windowSizeClass: WindowSizeClass, navController: NavController, viewModel: ControlViewModel, onNavigateToSettings: () -&gt; Unit, onNavigateToSetup: () -&gt; Unit )</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:SettingsAudioItem.kt$val (icon, title, subtitle, switch) = createRefs()</ID>
    <ID>EmptyFunctionBlock:UsbDongleControlRangeSlider.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:UsbDongleControlSlider.kt$&lt;no name provided&gt;${ }</ID>
    <ID>ForbiddenComment:FiioKa13UsbRepository.kt$FiioKa13UsbRepository$// FIXME: Reading current state is not working properly (firmware issue?)</ID>
    <ID>ForbiddenComment:FiioKa13UsbRepository.kt$FiioKa13UsbRepository$// TODO: Is it actually working?</ID>
    <ID>LargeClass:E1da9038UsbRepository.kt$E1da9038UsbRepository : UsbRepository</ID>
    <ID>LargeClass:FiioKa5UsbRepository.kt$FiioKa5UsbRepository : UsbRepository</ID>
    <ID>LongMethod:ControlBottomAppBar.kt$@Composable fun ControlBottomAppBar( windowSizeClass: WindowSizeClass, modifier: Modifier = Modifier, scrollBehavior: BottomAppBarScrollBehavior? = null, onRefresh: () -&gt; Unit = {}, onReset: () -&gt; Unit = {}, onProfileExport: (String) -&gt; Unit = {}, onNavigateToSettings: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:ControlScreen.kt$@Composable fun ControlScreen( windowSizeClass: WindowSizeClass, modifier: Modifier = Modifier, profileListState: LazyStaggeredGridState = rememberLazyStaggeredGridState(), snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, profiles: LazyPagingItems&lt;Profile&gt; = UnsupportedUsbDongle.profileFlow().collectAsLazyPagingItems(), usbDongle: UsbDongle = UnsupportedUsbDongle, selectedTabIndex: Int = 0, isLoading: Boolean = false, onTabSelected: (Int) -&gt; Unit = {}, onNavigateToSettings: () -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onReset: () -&gt; Unit = {}, onScrollToProfileIndex: suspend (Int) -&gt; Unit = {}, onProfileShortcutAdd: (Profile) -&gt; Unit = {}, onProfileShortcutRemove: (Profile) -&gt; Unit = {}, onProfileDelete: (Profile) -&gt; Unit = { _ -&gt; }, onProfileApply: (Profile) -&gt; Unit = { _ -&gt; }, onProfileExport: (String) -&gt; Unit = { _ -&gt; }, onChannelBalanceSelected: (Int) -&gt; Unit = { _ -&gt; }, onDacModeSelected: (Byte) -&gt; Unit = { _ -&gt; }, onDisplayBrightnessSelected: (Int) -&gt; Unit = { _ -&gt; }, onDisplayTimeoutSelected: (Int) -&gt; Unit = { _ -&gt; }, onDisplayInvertChange: (Boolean) -&gt; Unit = { _ -&gt; }, onFilterSelected: (Byte) -&gt; Unit = { _ -&gt; }, onFilterForSampleRateSelected: (Byte, Int) -&gt; Unit = { _, _ -&gt; }, onGainSelected: (Byte) -&gt; Unit = { _ -&gt; }, onHardwareMuteEnabledSelected: (Boolean) -&gt; Unit = { _ -&gt; }, onHidModeSelected: (Byte) -&gt; Unit = { _ -&gt; }, onIndicatorStateSelected: (Byte) -&gt; Unit = { _ -&gt; }, onMasterClockDividerDsdSelected: (Byte, Int) -&gt; Unit = { _, _ -&gt; }, onMasterClockDividerPcmSelected: (Byte, Int) -&gt; Unit = { _, _ -&gt; }, onSpdifOutEnabledSelected: (Boolean) -&gt; Unit = { _ -&gt; }, onStandbyEnabledSelected: (Boolean) -&gt; Unit = { _ -&gt; }, onVolumeLevelSelected: (Float) -&gt; Unit = { _ -&gt; }, onVolumeModeSelected: (Byte) -&gt; Unit = { _ -&gt; } )</ID>
    <ID>LongMethod:ControlScreen.kt$@Composable fun ControlScreen( windowSizeClass: WindowSizeClass, navController: NavController, viewModel: ControlViewModel, onNavigateToSettings: () -&gt; Unit, onNavigateToSetup: () -&gt; Unit )</ID>
    <ID>LongMethod:E1da9038UsbRepository.kt$E1da9038UsbRepository$suspend fun getCurrentState(usbDongle: E1da9038): Result&lt;E1da9038&gt;</ID>
    <ID>LongMethod:E1da9038UsbRepository.kt$E1da9038UsbRepository$suspend fun setAll( e1da9038: E1da9038, filters: List&lt;Filter&gt;, hardwareMute: HardwareMute, masterClockDividersDsd: List&lt;MasterClockDivider&gt;, masterClockDividersPcm: List&lt;MasterClockDivider&gt;, standby: Standby, volumeLevel: VolumeLevel ): Result&lt;E1da9038&gt;</ID>
    <ID>LongMethod:E1da9038UsbRepository.kt$E1da9038UsbRepository$suspend fun setFilter(e1da9038: E1da9038, filter: Filter, index: Int): Result&lt;E1da9038&gt;</ID>
    <ID>LongMethod:E1da9038UsbRepository.kt$E1da9038UsbRepository$suspend fun setMasterClockDividerPcm( e1da9038: E1da9038, masterClockDivider: MasterClockDivider, index: Int ): Result&lt;E1da9038&gt;</ID>
    <ID>LongMethod:FiioKa13UsbRepository.kt$FiioKa13UsbRepository$suspend fun setVolumeLevel(fiioKa13: FiioKa13, volumeLevel: VolumeLevel): Result&lt;FiioKa13&gt;</ID>
    <ID>LongMethod:FiioKa5Items.kt$@Composable fun FiioKa5Items( modifier: Modifier = Modifier, fiioKa5: FiioKa5 = FiioKa5(), onChannelBalanceSelected: (Int) -&gt; Unit = {}, onVolumeLevelSelected: (Float) -&gt; Unit = {}, onVolumeModeSelected: (Byte) -&gt; Unit = {}, onDisplayBrightnessSelected: (Int) -&gt; Unit = {}, onDisplayTimeoutSelected: (Int) -&gt; Unit = {}, onDisplayInvertSelected: (Boolean) -&gt; Unit = {}, onGainSelected: (Byte) -&gt; Unit = {}, onFilterSelected: (Byte) -&gt; Unit = {}, onSpdifOutSelected: (Boolean) -&gt; Unit = {}, onHardwareMuteSelected: (Boolean) -&gt; Unit = {}, onDacModeSelected: (Byte) -&gt; Unit = {}, onHidModeSelected: (Byte) -&gt; Unit = {} )</ID>
    <ID>LongMethod:FiioKa5UsbRepository.kt$FiioKa5UsbRepository$suspend fun getCurrentState(usbDongle: FiioKa5): Result&lt;FiioKa5&gt;</ID>
    <ID>LongMethod:FiioKa5UsbRepository.kt$FiioKa5UsbRepository$suspend fun setAll( fiioKa5: FiioKa5, channelBalance: ChannelBalance, dacMode: DacMode, displayBrightness: DisplayBrightness, displayInvert: DisplayInvert, displayTimeout: DisplayTimeout, filter: Filter, gain: Gain, hardwareMute: HardwareMute, hidMode: HidMode, spdifOut: SpdifOut, volumeLevel: VolumeLevel, volumeMode: VolumeMode ): Result&lt;FiioKa5&gt;</ID>
    <ID>LongMethod:ItemAudio.kt$@Composable fun ItemAudio( modifier: Modifier = Modifier, channelBalance: Float = ChannelBalance.default().displayValue.toFloat(), channelBalanceInDb: String = "", channelBalanceDirection: String = "", channelBalanceStart: Float = ChannelBalance.MIN.toFloat(), channelBalanceEnd: Float = ChannelBalance.MAX.toFloat(), channelBalanceStepSize: Float = ChannelBalance.STEP_SIZE, volumeModeId: Byte = VolumeMode.default().id, volumeLevel: Float = VolumeLevel.default().displayValue.toFloat(), volumeLevelInPercent: String = "", volumeLevelStart: Float = VolumeLevel.MIN.toFloat(), volumeLevelEndModeA: Float = VolumeLevel.MAX_A.toFloat(), volumeLevelEndModeB: Float = VolumeLevel.MAX_B.toFloat(), volumeLevelStepSize: Float = VolumeLevel.STEP_SIZE, onChannelBalanceSelected: (Int) -&gt; Unit = {}, onVolumeLevelSelected: (Float) -&gt; Unit = {}, onVolumeModeSelected: (Byte) -&gt; Unit = {} )</ID>
    <ID>LongMethod:MoondropDawnUsbRepository.kt$MoondropDawnUsbRepository$suspend fun getCurrentState(usbDongle: MoondropDawn): Result&lt;MoondropDawn&gt;</ID>
    <ID>LongMethod:MoondropDawnUsbRepository.kt$MoondropDawnUsbRepository$suspend fun setAll( moondropDawn: MoondropDawn, filter: Filter, gain: Gain, indicatorState: IndicatorState, volumeLevel: VolumeLevel ): Result&lt;MoondropDawn&gt;</ID>
    <ID>LongMethod:MoondropMoonriver2TiUsbRepository.kt$MoondropMoonriver2TiUsbRepository$suspend fun setAll( moondropMoonriver2Ti: MoondropMoonriver2Ti, filter: Filter, gain: Gain, indicatorState: IndicatorState, volumeLevel: VolumeLevel ): Result&lt;MoondropMoonriver2Ti&gt;</ID>
    <ID>LongMethod:NavGraph.kt$@Composable fun NavGraph( windowSizeClass: WindowSizeClass, navController: NavHostController, modifier: Modifier = Modifier, startDestination: NavDestinations = NavDestinations.Setup )</ID>
    <ID>LongMethod:ProfileItems.kt$@Composable fun ProfileItems( modifier: Modifier = Modifier, state: LazyStaggeredGridState = rememberLazyStaggeredGridState(), profiles: LazyPagingItems&lt;Profile&gt; = UnsupportedUsbDongle.profileFlow().collectAsLazyPagingItems(), onProfileShortcutAdd: (Profile) -&gt; Unit = {}, onProfileShortcutRemove: (Profile) -&gt; Unit = {}, onProfileDelete: (Profile) -&gt; Unit = {}, onProfileApply: (Profile) -&gt; Unit = {} )</ID>
    <ID>LongMethod:SetProfileUseCase.kt$SetProfileUseCase$suspend operator fun invoke(usbDongle: UsbDongle, profile: Profile): Result&lt;UsbDongle&gt;</ID>
    <ID>LongMethod:SettingsAudioItem.kt$@Composable fun SettingsAudioItem( windowSizeClass: WindowSizeClass, modifier: Modifier = Modifier, isMaximizeVolumeEnabled: Boolean = false, onMaximizeVolumeSwitched: (Boolean) -&gt; Unit = {} )</ID>
    <ID>LongMethod:SetupScreen.kt$@Composable fun SetupScreen(viewModel: SetupViewModel, onNavigateToControl: () -&gt; Unit)</ID>
    <ID>LongMethod:UsbServiceNotification.kt$UsbServiceNotification$fun &lt;D&gt; build( context: Context, usbDongle: D, volumeStepSize: Float ): Notification</ID>
    <ID>LongParameterList:ControlViewModel.kt$ControlViewModel$( savedStateHandle: SavedStateHandle, pagingConfig: PagingConfig, private val audioRepository: AudioRepository, private val profileRepository: ProfileRepository, private val usbRepository: UsbRepository, private val settingsRepository: SettingsRepository, private val setProfileUseCase: SetProfileUseCase, private val getCurrentStateUseCase: GetCurrentStateUseCase, private val getVolumeLevelUseCase: GetVolumeLevelUseCase, private val setChannelBalanceUseCase: SetChannelBalanceUseCase, private val setDacFilterForSampleRateUseCase: SetDacFilterForSampleRateUseCase, private val setDacFilterUseCase: SetDacFilterUseCase, private val setDacModeUseCase: SetDacModeUseCase, private val setDisplayBrightnessUseCase: SetDisplayBrightnessUseCase, private val setDisplayInvertEnabledUseCase: SetDisplayInvertEnabledUseCase, private val setDisplayTimeoutUseCase: SetDisplayTimeoutUseCase, private val setGainUseCase: SetGainUseCase, private val setHardwareMuteEnabledUseCase: SetHardwareMuteEnabledUseCase, private val setHidModeUseCase: SetHidModeUseCase, private val setIndicatorStateUseCase: SetIndicatorStateUseCase, private val setMasterClockDividerDsdForSampleRateUseCase: SetMasterClockDividerDsdForSampleRateUseCase, private val setMasterClockDividerPcmForSampleRateUseCase: SetMasterClockDividerPcmForSampleRateUseCase, private val setSpdifOutEnabledUseCase: SetSpdifOutEnabledUseCase, private val setStandbyEnabledUseCase: SetStandbyEnabledUseCase, private val setVolumeLevelUseCase: SetVolumeLevelUseCase, private val setVolumeModeUseCase: SetVolumeModeUseCase, private val synchronizeVolumeLevelUseCase: SynchronizeVolumeLevelUseCase )</ID>
    <ID>LongParameterList:E1da9038UsbRepository.kt$E1da9038UsbRepository$( e1da9038: E1da9038, filters: List&lt;Filter&gt;, hardwareMute: HardwareMute, masterClockDividersDsd: List&lt;MasterClockDivider&gt;, masterClockDividersPcm: List&lt;MasterClockDivider&gt;, standby: Standby, volumeLevel: VolumeLevel )</ID>
    <ID>LongParameterList:FiioKa5UsbRepository.kt$FiioKa5UsbRepository$( fiioKa5: FiioKa5, channelBalance: ChannelBalance, dacMode: DacMode, displayBrightness: DisplayBrightness, displayInvert: DisplayInvert, displayTimeout: DisplayTimeout, filter: Filter, gain: Gain, hardwareMute: HardwareMute, hidMode: HidMode, spdifOut: SpdifOut, volumeLevel: VolumeLevel, volumeMode: VolumeMode )</ID>
    <ID>LongParameterList:UsbDongleControlRangeSlider.kt$( stepSize: Float, values: ImmutableList&lt;Float&gt;, valueFrom: Float, valueTo: Float, onFirstValueChangeFinished: (Float) -&gt; Unit, onLastValueChangeFinished: (Float) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:UsbRepository.kt$UsbRepository$( usbEndpointRead: UsbEndpoint, usbEndpointWrite: UsbEndpoint, payload: ByteArray, payloadSize: Int, transferTimeout: Int, delayInMillisecondsAfterTransfer: Long )</ID>
    <ID>MagicNumber:AttachUsbDongle.kt$2000</ID>
    <ID>MagicNumber:FiioKa13.kt$FiioKa13$100</ID>
    <ID>MagicNumber:FiioKa5.kt$FiioKa5$100</ID>
    <ID>MagicNumber:MoondropDawn.kt$MoondropDawn$100</ID>
    <ID>MagicNumber:MoondropMoonriver2Ti.kt$MoondropMoonriver2Ti$100</ID>
    <ID>MagicNumber:ProfileItems.kt$16</ID>
    <ID>MagicNumber:UsbDongleControlRangeSlider.kt$100f</ID>
    <ID>MagicNumber:UsbDongleControlRangeSlider.kt$10f</ID>
    <ID>MagicNumber:VolumeLevel.kt$0.5f</ID>
    <ID>ReturnCount:UsbServiceVolumeLevelReceiver.kt$UsbServiceVolumeLevelReceiver$override fun onReceive(context: Context?, intent: Intent?)</ID>
    <ID>TooGenericExceptionCaught:CoroutineExtensions.kt$exception: Exception</ID>
    <ID>TooManyFunctions:ControlViewModel.kt$ControlViewModel : ViewModelContainerHost</ID>
    <ID>TooManyFunctions:FiioKa5UsbRepository.kt$FiioKa5UsbRepository : UsbRepository</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val INTENT_ACTION_SHORTCUT_PROFILE = TOP_LEVEL_PACKAGE_NAME + "INTENT_ACTION_SHORTCUT_PROFILE"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val INTENT_ACTION_USB_PERMISSION = TOP_LEVEL_PACKAGE_NAME + "INTENT_ACTION_USB_PERMISSION"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val INTENT_EXTRA_CONSUMED = TOP_LEVEL_PACKAGE_NAME + "EXTRA_CONSUMED"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val TOP_LEVEL_PACKAGE_NAME = "io.github.tommygeenexus."</ID>
  </CurrentIssues>
</SmellBaseline>
