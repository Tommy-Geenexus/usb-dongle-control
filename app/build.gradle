import io.gitlab.arturbosch.detekt.Detekt
import io.gitlab.arturbosch.detekt.DetektCreateBaselineTask

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.compose.compiler.report.generator)
    alias(libs.plugins.dagger.hilt.android)
    alias(libs.plugins.detekt)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.kotlinter)
    alias(libs.plugins.room)
    alias(libs.plugins.spotless)
    alias(libs.plugins.versions)
}

android {
    namespace "io.github.tommy_geenexus.usbdonglecontrol"

    compileSdk 34

    defaultConfig {
        applicationId "io.github.tommy_geenexus.usbdonglecontrol"
        minSdk 31
        targetSdk 34
        versionCode 5
        versionName "2.1.0"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.5.3"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }
}

tasks.named("dependencyUpdates").configure {
    def isNonStable = { String version ->
        def stableKeyword = ["RELEASE", "FINAL", "GA"].any { keyword ->
            version.toUpperCase().contains(keyword)
        }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

tasks.withType(Detekt).configureEach {
    jvmTarget = "1.8"
}

tasks.withType(DetektCreateBaselineTask).configureEach {
    jvmTarget = "1.8"
}

detekt {
    baseline = file("$projectDir/config/detekt/baseline.xml")
    config.setFrom("$projectDir/config/detekt/detekt.yml")
    buildUponDefaultConfig = true
}

kotlin {
    compilerOptions {
        freeCompilerArgs.add("-opt-in=androidx.compose.material3.ExperimentalMaterial3Api")
        freeCompilerArgs.add("-opt-in=com.google.accompanist.permissions.ExperimentalPermissionsApi")
        freeCompilerArgs.add("-opt-in=androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi")
        freeCompilerArgs.add("-opt-in=org.orbitmvi.orbit.annotation.OrbitExperimental")
    }
}

room {
    schemaDirectory("$projectDir/schemas/")
}

spotless {
    kotlin {
        ratchetFrom("origin/main")
        target("**/*.kt")
        licenseHeaderFile rootProject.file("spotless/copyright.txt")
    }
}

dependencies {
    debugImplementation libs.leakcanary
    implementation platform(libs.compose.bom)
    implementation libs.bundles.implementation
    kapt libs.bundles.kapt
    lintChecks libs.bundles.lint.checks
}
